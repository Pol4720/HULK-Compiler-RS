"Basic functions""
print()
sqrt()
sin()
cos()
exp() computes the value of e raised to a value
log(base,value)
rand() returns a random uniform number between 0 and 1 (inclusively)

Mathematical constants
PI
E 

Function Invocation is also an expression in hulk
The body of a program in hulk always end with a single global expression (if is necessary it ends with a final semicolon)


Expression Blocks
you can also use an expression block, which is nothing but a series of expressions between curly braces ({ and }), and separated by ;.

The most trivial usage of expression blocks is to allow multiple print statements as the body of a program. For example, the following is a valid HULK program:

Variables 

Variables in hulk are lexically scope which means that their scope is explicitely defined by the syntax
You use the let expression to introduce one or more variabels an evaluate an expression in a new scope where those variables are defined

let msg = "Hello World" in print(msg);
let number = 42, text = "The meaning of life is" in
    print(text @ number);
Same as: let number = 42 in
    let text = "The meaning of life is" in
        print(text @ number);

Scoping Rules

Since the binding is performed left-to-right (or equivalently starting from the outer let), and every variable is effectively bound in a new scope, you can safely use one variable when defining another:

let a = 6, b = a * 7 in print(b);
let a = 6 in 
    let b = a * 7 in 
        print(b);

Also the let expression can have an expression block
let a = 5, b = 10, c = 20 in {
    print(a+b);
    print(b*c);
    print(c/a);
}