# Especificación de tokens para el generador de analizadores léxicos
# Formato: NOMBRE_TOKEN : REGEX
# IMPORTANTE: El orden determina la prioridad - tokens más específicos primero

# Comentarios (deben ir primero para tener prioridad máxima)
COMENTARIO_HASH : #[^\r\n]*
COMENTARIO_LINEA : //[^\r\n]*
COMENTARIO_BLOQUE : /\*([^*]|(\*+[^*/]))*\*+/

# Operadores compuestos (ANTES que los simples para evitar ambigüedad)
SUMA_ASIGN : \+=
RESTA_ASIGN : -=
MULT_ASIGN : \*=
DIV_ASIGN : /=
MOD_ASIGN : %=
INCREMENTO : \+\+
DECREMENTO : --
IGUAL : ==
DIFERENTE : !=
MENOR_IGUAL : <=
MAYOR_IGUAL : >=
AND_LOGICO : &&
SHIFT_IZQ : <<
SHIFT_DER : >>

# Palabras clave (ANTES que IDENTIFICADOR para tener prioridad)
IF : if
ELSE : else
WHILE : while
FOR : for
RETURN : return
INT : int
FLOAT : float
CHAR : char
VOID : void
BREAK : break
CONTINUE : continue
TRUE : true
FALSE : false

# Literales numéricos (ANTES que IDENTIFICADOR)
NUMERO_DECIMAL : [0-9]+\.[0-9]+
NUMERO_ENTERO : [0-9]+

# IDENTIFICADOR debe ir DESPUÉS de palabras clave y números
IDENTIFICADOR : [a-zA-Z_][a-zA-Z0-9_]*

# Operadores simples (DESPUÉS de los compuestos)
SUMA : \+
RESTA : -
MULTIPLICACION : \*
DIVISION : /
MODULO : %
MENOR_QUE : <
MAYOR_QUE : >
AND_BITWISE : &
OR_BITWISE : \|
NOT_LOGICO : !
NOT_BITWISE : ~
ASIGNACION : =

# Literales de texto
CARACTER : '[^']*'
CADENA : "[^"]*"

# Delimitadores y signos de puntuación
PUNTO_COMA : ;
COMA : ,
PUNTO : \.
PARENTESIS_IZQ : \(
PARENTESIS_DER : \)
LLAVE_IZQ : \{
LLAVE_DER : \}
CORCHETE_IZQ : \[
CORCHETE_DER : \]
DOS_PUNTOS : :
INTERROGACION : \?

# Espacios en blanco (para ignorar - se filtrarán en el extractor)
ESPACIO : [ \t]+
NUEVA_LINEA : \r?\n
RETORNO_CARRO : \r
NUEVA_LINEA : \r?\n
RETORNO_CARRO : \r


