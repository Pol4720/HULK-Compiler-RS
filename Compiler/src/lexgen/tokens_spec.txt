# Especificación de tokens para el generador de analizadores léxicos
# Formato: NOMBRE_TOKEN : REGEX

# Palabras clave (reservadas)
IF : if
ELSE : else
WHILE : while
FOR : for
RETURN : return
INT : int
FLOAT : float
CHAR : char
VOID : void
BREAK : break
CONTINUE : continue
TRUE : true
FALSE : false

# Grupos y alternativas
GRUPO_ALTERNATIVA : (abc|def|ghi)
GRUPO_PARENTESIS : (hola)+

# Clases de caracteres
SOLO_LETRAS_MINUSCULAS : [a-z]+
SOLO_LETRAS_MAYUSCULAS : [A-Z]+
SOLO_DIGITOS : [0-9]+
LETRA_O_DIGITO : [a-zA-Z0-9]+


IDENTIFICADOR : [a-zA-Z_][a-zA-Z0-9_]*

# Operadores aritméticos
SUMA : \+
RESTA : -
MULTIPLICACION : \*
DIVISION : /
MODULO : %

# Operadores de asignación combinada
SUMA_ASIGN : \+=
RESTA_ASIGN : -=
MULT_ASIGN : \*=
DIV_ASIGN : /=
MOD_ASIGN : %=

# Operadores de comparación
IGUAL : ==
DIFERENTE : !=
MENOR_QUE : <
MAYOR_QUE : >
MENOR_IGUAL : <=
MAYOR_IGUAL : >=

# Operadores lógicos
AND_LOGICO : &&
NOT_LOGICO : !

# Operadores de incremento/decremento
INCREMENTO : \+\+
DECREMENTO : --

# Operadores bitwise
AND_BITWISE : &
OR_BITWISE : \|
NOT_BITWISE : ~
SHIFT_IZQ : <<
SHIFT_DER : >>

# Delimitadores y signos de puntuación
ASIGNACION : =
PUNTO_COMA : ;
COMA : ,
PUNTO : \.
PARENTESIS_IZQ : \(
PARENTESIS_DER : \)
LLAVE_IZQ : \{
LLAVE_DER : \}
CORCHETE_IZQ : \[
CORCHETE_DER : \]
DOS_PUNTOS : :
INTERROGACION : \?

# Comentarios
COMENTARIO_HASH : #[^\n]*

# Literales adicionales
NUMERO_DECIMAL : [0-9]+\.[0-9]+
CARACTER : '[^']*'
CADENA : "[^"]*"

# Espacios en blanco (para ignorar)
ESPACIO : [ \t]+
NUEVA_LINEA : \n
RETORNO_CARRO : \r

# Comentarios de línea
COMENTARIO_LINEA : //[^\n]*
COMENTARIO_BLOQUE : /\*([^*]|\*[^/])*\*/


