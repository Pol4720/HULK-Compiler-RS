// //!
// # parser.lalrpop

// Este archivo define la gramática principal del lenguaje Hulk usando LALRPOP para el compilador Hulk.

// ## Propósito

// - Especifica la sintaxis del lenguaje Hulk, incluyendo declaraciones, expresiones, tipos, funciones, bloques, operadores y estructuras de control.
// - Traduce el código fuente en un AST (Árbol de Sintaxis Abstracta) usando las estructuras definidas en los módulos de nodos del compilador.
// - Permite la integración directa con el sistema de tipos, el análisis semántico y la generación de código.

// ## Características principales

// - **Programa principal:** Regla `Program` que representa la raíz del AST, compuesta por una lista de instrucciones.
// - **Instrucciones:** Soporte para definiciones de tipos (`type`), funciones (`function`), y expresiones.
// - **Definición de tipos:** Permite herencia, atributos y métodos dentro de bloques de tipo.
// - **Funciones:** Soporta funciones con cuerpo de bloque o de expresión, parámetros tipados y firmas.
// - **Expresiones:** Incluye expresiones aritméticas, lógicas, de comparación, llamadas a función, acceso a miembros, instanciación de tipos, bloques, literales, y control de flujo (`if`, `let-in`, `while`, `for`).
// - **Operadores:** Define precedencia y reglas para operadores binarios y unarios, incluyendo operadores personalizados como `@` para concatenación y `:=` para asignación destructiva.
// - **Bloques y listas:** Soporta bloques de código y listas de expresiones o asignaciones.
// - **Tokens y literales:** Define cómo se reconocen identificadores, literales numéricos, booleanos y de cadena, así como todos los delimitadores y palabras clave del lenguaje.

// ## Ejemplo de uso

// Un fragmento de código Hulk como:

// ```hulk
// type Point(x: Number, y: Number) {
//     name := "origin";
//     move(dx: Number, dy: Number) => {
//         x := x + dx;
//         y := y + dy;
//     }
// };

// let p = new Point(0, 0) in p.move(1, 2);
// ````

use std::str::FromStr;
use either::Either;

use crate::hulk_ast_nodes::{
    hulk_literal::*, hulk_identifier::*, hulk_binary_expr::*, hulk_unary_expr::*,
    hulk_assignment::*, hulk_whileloop::*, hulk_let_in::*, hulk_for_expr::*,
};
use crate::hulk_tokens::{
    hulk_operators::*, hulk_keywords::KeywordToken, token_pos::*,
};
use crate::hulk_ast_nodes::hulk_program::{ProgramNode, Definition};
use crate::hulk_ast_nodes::hulk_function_def::FunctionDef;
use crate::hulk_ast_nodes::hulk_function_call::FunctionCall;
use crate::hulk_ast_nodes::hulk_code_block::ExpressionList;
use crate::hulk_ast_nodes::hulk_expression::{Expr, ExprKind};
use crate::hulk_ast_nodes::hulk_if_exp::{IfExpr};
use crate::hulk_ast_nodes::hulk_function_def::{FunctionParams, FunctionHeaderStruct, FunctionBody, ArrowExpression};
use crate::hulk_ast_nodes::DestructiveAssignment;
use crate::hulk_ast_nodes::hulk_code_block::Block;
use crate::hulk_ast_nodes::hulk_type_def::{HulkTypeNode, AttributeDef};
use crate::hulk_ast_nodes::hulk_inheritance::Inheritance;
use crate::hulk_ast_nodes::hulk_function_access::FunctionAccess;
use crate::hulk_ast_nodes::hulk_member_access::MemberAccess;
use crate::hulk_ast_nodes::hulk_new_instance::NewTypeInstance;
use crate::hulk_ast_nodes::hulk_print_expr::PrintExpr;
use crate::semantic_visitor::hulk_semantic_visitor::*;
use crate::semantic_visitor::hulk_semantic_visitor::{Instruction, program_from_instructions};
use crate::hulk_ast_nodes::hulk_global_function::GlobalFunctionDef;
use crate::hulk_tokens::token_pos::TokenPos;

grammar;


// ===================
// Programa principal
// ===================

pub Program: ProgramNode = {
    InstructionList => program_from_instructions(<>),
}

InstructionList: Vec<Instruction> = {
    <mut h:InstructionList> <i:Instruction> => { h.push(i); h },
    <i:Instruction> => { let mut h = Vec::new(); h.push(i); h }
}

Instruction: Instruction = {
    Definition => Instruction::from(<>),
    <x:Expr> ";" => Instruction::from(*x),
}

Definition: Definition = {
    TypeDef => Definition::from(<>),
    GlobalFunctionDef => Definition::from(<>),
}

GlobalFunctionDef: GlobalFunctionDef = {
    <s:@L> <func_keyword:Function> <header:FunctionHeader> <body:FunctionBody> <e:@R> =>
        GlobalFunctionDef::from_header_and_body(func_keyword.0, header, body,  TokenPos::new(s, e)),
}

FunctionBody: FunctionBody = {
    <body:ArrowExpression> ";" => FunctionBody::from(body),
    <block:CodeBlock> => FunctionBody::from(block),
}

FunctionHeader: FunctionHeaderStruct = {
    <s:@L> <name:Identifier> LParen <params:IdentifierList> RParen DoubleDot <signature:Signature> <e:@R>=>
        FunctionHeaderStruct { name: name.0, params, signature: signature.0, token_pos: TokenPos::new(s, e) },
    <s:@L> <name:Identifier> LParen RParen DoubleDot <signature:Signature> <e:@R> =>
        FunctionHeaderStruct { name: name.0, params: vec![], signature: signature.0, token_pos: TokenPos::new(s, e) },
}

ArrowExpression: ArrowExpression = {
    Arrow <x:Expr> => ArrowExpression::new(x),
}

TypeDef: HulkTypeNode = {
    <s:@L> Type <name:Identifier> <p:Params?> <i:Inheritance?> LBrace <attrs_methods:TypeBodyDef> RBrace <e:@R> => {
        let (attrs, methods) = attrs_methods;
        let (parent, parent_args) = if let Some(inh) = i {
            (Some(inh.parent_type.clone()), inh.arguments)
        } else {
            (None, Vec::new())
        };
        let mut node = HulkTypeNode::new(name.0, parent, parent_args, p.unwrap_or_default(),  TokenPos::new(s, e));
        for attr in attrs { node.attributes.insert(attr.name.id.clone(), attr); }
        for method in methods { node.methods.insert(method.name.clone(), method); }
        node
    }
}

TypeBodyDef: (Vec<AttributeDef>, Vec<FunctionDef>) = {
    <members:(TypeMember Semicolon)*> => {
        let mut attrs = Vec::new();
        let mut methods = Vec::new();
        for (m, _) in members {
            match m {
                Either::Left(attr) => attrs.push(attr),
                Either::Right(method) => methods.push(method),
            }
        }
        (attrs, methods)
    }
}

TypeMember: Either<AttributeDef, FunctionDef> = {
    TypeMemberAssignment => Either::Left(<>),
    TypeMemberFunctionDef => Either::Right(<>),
}

TypeMemberAssignment: AttributeDef = {
    <s:@L> <id:Identifier> Assign <e:Expr> <e2:@R> => AttributeDef { 
        name: Identifier { id: id.0, _type: None, token_pos: TokenPos::new(s, e2) }, 
        init_expr: e 
    },
}
TypeMemberFunctionDef: FunctionDef = {
    <s:@L> <i:Identifier> LParen <params:IdentifierList> RParen DoubleDot <sig:Signature> Arrow <body:Expr> <e:@R> =>
        FunctionDef::new_expr(i.0, params, sig.0, body, TokenPos::new(s, e)),
    <s:@L> <i:Identifier> LParen RParen DoubleDot <sig:Signature> Arrow <body:Expr> <e:@R> =>
        FunctionDef::new_expr(i.0, Vec::new(), sig.0, body, TokenPos::new(s, e)),
    <s:@L> <i:Identifier> LParen <params:IdentifierList> RParen DoubleDot <sig:Signature> <body:CodeBlock> <e:@R> =>
        FunctionDef::new_expr(i.0, params, sig.0, body, TokenPos::new(s, e)),
    <s:@L> <i:Identifier> LParen RParen DoubleDot <sig:Signature> <body:CodeBlock> <e:@R> =>
        FunctionDef::new_expr(i.0, Vec::new(), sig.0, body, TokenPos::new(s, e)),
}

Inheritance: Inheritance = {
    <s:@L> Inherits <parent_type:Identifier> LParen <p:ArgList> RParen <e:@R> =>
        Inheritance::new(parent_type.0, p.into_iter().map(|b| *b).collect(), TokenPos::new(s, e)),
    <s:@L> Inherits <parent_type:Identifier>  <e:@R> =>
        Inheritance::new(parent_type.0, Vec::new(), TokenPos::new(s, e)),
}

TypeFunctionAccess: FunctionAccess = {
    <s:@L> <object:PrimaryExpr> DotAccess <name:Identifier> LParen <args:ArgList> RParen <e:@R> => FunctionAccess {
        object,
        member: Box::new(FunctionCall::new(name.0, args.into_iter().map(|b| *b).collect(),name.1)),
        _type: None,
        token_pos: TokenPos::new(s, e),
    }
}
TypePropAccess: Box<MemberAccess> = {
    <s:@L> <object:PrimaryExpr> DotAccess <name:Identifier> <e:@R> => Box::new(MemberAccess {
        object,
        member: Identifier { id: name.0, _type: None, token_pos: name.1 },
        _type: None,
        token_pos: TokenPos::new(s, e),
    })
}

// ===================
// Expresiones y listas
// ===================
Expr: Box<Expr> = {
    DestructiveAssignExpr,
    LogicalOrExpr,
}

Exprs_List: ExpressionList = {
    <v:(<Expr> Semicolon)*> <last:Expr?> => {
        let mut vec = v;
        if let Some(e) = last { vec.push(e); }
        ExpressionList::new(vec.into_iter().map(|b| *b).collect())
    }
}

LogicalOrExpr: Box<Expr> = {
    <s:@L> <left:LogicalOrExpr> <op:LogicalOrOp> <right:LogicalAndExpr> <e:@R> => Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr {
        left, 
        operator: op.0, 
        right, 
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
    LogicalAndExpr,
}

LogicalAndExpr: Box<Expr> = {
    <s:@L> <left:LogicalAndExpr> <op:LogicalAndOp> <right:EqualEqualExpr> <e:@R> => Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr {
        left, 
        operator: op.0, 
        right, 
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
    EqualEqualExpr,
}

DestructiveAssignExpr: Box<Expr> = {
    <s:@L> <id:PrimaryExpr> <op:DestructiveAssignOp> <e:Expr> <e2:@R> => Box::new(Expr::new(ExprKind::DestructiveAssign(DestructiveAssignment {
        identifier: id, 
        expression: e, 
        _type: None,
        token_pos: TokenPos::new(s, e2),
    }))),
}

Assignment: Assignment = {
    <s:@L> <id:Identifier> Assign <e:Expr> <e2:@R> => Assignment {
        identifier: Identifier { id: id.0, _type: None, token_pos: id.1 },
        expression: e,
        _type: None,
        token_pos: TokenPos::new(s, e2),
    },
}

// ===================
// Operadores binarios
// ===================
EqualEqualExpr: Box<Expr> = {
    <s:@L> <left:ComparisonExpr> <rest:(EqualOp ComparisonExpr)*> <e:@R> => {
        rest.into_iter().fold(left, |left, (op, right)| {
            Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr { 
                left, 
                operator: op.0, 
                right, 
                _type: None, 
                token_pos: TokenPos::new(s, e),
            })))
        })
    }
}

ComparisonExpr: Box<Expr> = {
    <s:@L> <left:TermExpr> <rest:(ComparisonOp TermExpr)*> <e:@R> => {
        rest.into_iter().fold(left, |left, (op, right)| {
            Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr { 
                left, 
                operator: op.0, 
                right, 
                _type: None, 
                token_pos: TokenPos::new(s, e),
            })))
        })
    }
}

TermExpr: Box<Expr> = {
    <s:@L> <left:FactorExpr> <rest:(TermOp FactorExpr)*> <e:@R> => {
        rest.into_iter().fold(left, |left, (op, right)| {
            Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr { left, operator: op.0, right, _type: None, token_pos: TokenPos::new(s, e) })))
        })
    }
}

FactorExpr: Box<Expr> = {
    <s:@L> <left:ExponentExpr> <rest:(FactorOp ExponentExpr)*> <e:@R> => {
        rest.into_iter().fold(left, |left, (op, right)| {
            Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr { left, operator: op.0, right, _type: None , token_pos: TokenPos::new(s, e)})))
        })
    }
}

ExponentExpr: Box<Expr> = {
   <s:@L> <left:UnaryExpr> <op:PowOp> <right:ExponentExpr> <e:@R> =>
        Box::new(Expr::new(ExprKind::BinaryOp(BinaryExpr { left, operator: op.0, right, _type: None , token_pos: TokenPos::new(s, e)}))),
    UnaryExpr,
}

// ===================
// Operadores y tokens
// ===================
EqualOp: (BinaryOperatorToken, TokenPos) = {
    <s:@L> "==" <e:@R> => (BinaryOperatorToken::EqEq, TokenPos::new(s, e)),
    <s:@L> "!=" <e:@R> => (BinaryOperatorToken::Neq, TokenPos::new(s, e)),
}

ComparisonOp: (BinaryOperatorToken, TokenPos) = {
    <s:@L> ">" <e:@R> => (BinaryOperatorToken::Gt, TokenPos::new(s, e)),
    <s:@L> ">=" <e:@R> => (BinaryOperatorToken::Gte, TokenPos::new(s, e)),
    <s:@L> "<" <e:@R> => (BinaryOperatorToken::Lt, TokenPos::new(s, e)),
    <s:@L> "<=" <e:@R> => (BinaryOperatorToken::Lte, TokenPos::new(s, e)),
}

TermOp: (BinaryOperatorToken, TokenPos) = {
    <s:@L> "+" <e:@R> => (BinaryOperatorToken::Plus, TokenPos::new(s, e)),
    <s:@L> "-" <e:@R> => (BinaryOperatorToken::Minus, TokenPos::new(s, e)),
    <s:@L> "@" <e:@R> => (BinaryOperatorToken::Concat, TokenPos::new(s, e)),
}

FactorOp: (BinaryOperatorToken, TokenPos) = {
    <s:@L> "*" <e:@R> => (BinaryOperatorToken::Mul, TokenPos::new(s, e)),
    <s:@L> "/" <e:@R> => (BinaryOperatorToken::Div, TokenPos::new(s, e)),
    <s:@L> "%" <e:@R> => (BinaryOperatorToken::Mod, TokenPos::new(s, e)),
}

PowOp: (BinaryOperatorToken, TokenPos) = {
    <s:@L> "^" <e:@R> => (BinaryOperatorToken::Pow, TokenPos::new(s, e)),
}

Assign: (BinaryOperatorToken, TokenPos) = {
    <s:@L> "=" <e:@R> => (BinaryOperatorToken::Eq, TokenPos::new(s, e)),
}

// ===================
// Expresiones unarias y primarias
// ===================
UnaryExpr: Box<Expr> = {
    <s:@L> <op:UnaryOp> <expr:UnaryExpr> <e:@R> => Box::new(Expr::new(ExprKind::UnaryOp(UnaryExpr {
        operator: op.0,
        operand: expr,
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
    UpperExpressions,
}
UnaryOp: (UnaryOperator, TokenPos) = {
    <s:@L> "!" <e:@R> => (UnaryOperator::LogicalNot, TokenPos::new(s, e)),
    <s:@L> "-" <e:@R> => (UnaryOperator::Minus, TokenPos::new(s, e)),
    <s:@L> "+" <e:@R> => (UnaryOperator::Plus, TokenPos::new(s, e)),
}

FunctionCall: FunctionCall = {
    <s:@L> <name:Identifier> LParen <args:ArgList> RParen <e:@R> => FunctionCall {
        funct_name: name.0,
        arguments: args.into_iter().map(|b| *b).collect(),
        _type: None,
        token_pos: TokenPos::new(s, e),
    },
}

PrintExp: Box<Expr> = {
    <s:@L> Print LParen <expression:Expr> RParen <e:@R> => Box::new(Expr::new(ExprKind::Print(PrintExpr {
        expr: expression,
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
}

UpperExpressions: Box<Expr> = {
    WhileLoop,
    ForExpr,
    IfExpr,
    LetIn,
    PrimaryExpr,
}

PrimaryExpr: Box<Expr> = {
    PrintExp,
    FunctionCall => Box::new(Expr::new(ExprKind::FunctionCall(<>))),
    TypeFunctionAccess => Box::new(Expr::new(ExprKind::FunctionAccess(<>))),
    TypePropAccess => Box::new(Expr::new(ExprKind::MemberAccess(*<>))),
    <s: @L> New <name:Identifier> LParen <args:ArgList> RParen <e: @R> => Box::new(Expr::new(ExprKind::NewTypeInstance(NewTypeInstance {
        type_name: Identifier { id: name.0, _type: None ,token_pos: name.1},
        arguments: args.into_iter().map(|b| *b).collect(),
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
    CodeBlock,
    LParen <Expr> RParen => Box::new(*<>),
    NumberLiteral => Box::new(Expr::new(ExprKind::Number(NumberLiteral { value: <>.0, _type: None, token_pos: <>.1 }))),
    BooleanLiteral => Box::new(Expr::new(ExprKind::Boolean(BooleanLiteral { value: <>.0, _type: None, token_pos: <>.1 }))),
    StringLiteral => Box::new(Expr::new(ExprKind::String(StringLiteral { value: <>.0, _type: None, token_pos: <>.1 }))),
    Identifier => Box::new(Expr::new(ExprKind::Identifier(Identifier { id: <>.0, _type: None, token_pos: <>.1 }))),
}

// ===================
// Funciones y listas de parámetros
// ===================
Function: (KeywordToken, TokenPos) = { <s:@L> "function" <e:@R> => (KeywordToken::Function, TokenPos::new(s, e)) }
Arrow: (DelimiterToken, TokenPos) = { <s:@L> "=>" <e:@R> => (DelimiterToken::Arrow, TokenPos::new(s, e)) }
Type: (KeywordToken, TokenPos) = { <s:@L> "type" <e:@R> => (KeywordToken::Type, TokenPos::new(s, e)) }
Inherits: (KeywordToken, TokenPos) = { <s:@L> "inherits" <e:@R> => (KeywordToken::Inherits, TokenPos::new(s, e)) }

IdentifierList: Vec<FunctionParams> = {
    <first:Identifier> DoubleDot <s:Signature> <rest:(Comma Identifier DoubleDot Signature)*> => {
        let mut vec = vec![FunctionParams::new(first.0, s.0, first.1)];
        for (_, id, _, signature) in rest {
            vec.push(FunctionParams::new(id.0, signature.0, id.1));
        }
        vec
    }
}

// ===================
// Bloques y listas de asignación
// ===================

CodeBlock: Box<Expr> = {
    <s:@L> LBrace <body:Exprs_List> RBrace <e:@R> => Box::new(Expr::new(ExprKind::CodeBlock(Block {
        expression_list: Box::new(body),
        _type: None,
    }))),
}

AssignmentList: Vec<Assignment> = {
    <l:AssignmentList> "," <r:Assignment> => {
        let mut l = l;
        l.push(r);
        l
    },
    <r:Assignment> => {
        let mut v = Vec::new();
        v.push(r);
        v
    },
}

// ===================
// Expresiones especiales: if, let, while, print
// ===================
LetIn: Box<Expr> = {
    <s:@L> <let_keyword:Let> <a:AssignmentList> <in_keyword:In> <body:UpperExpressions> <e:@R> => Box::new(Expr::new(ExprKind::LetIn(LetIn {
        let_token: let_keyword.0,
        assignment: a,
        in_keyword: in_keyword.0,
        body,
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
}

IfExpr: Box<Expr> = {
    <s:@L> <if_keyword:IfKeyword> LParen <condition:Expr> RParen <then_branch:CodeBlock> <elif_else:ElifElse?> <e:@R> => {
        Box::new(Expr::new(ExprKind::If(IfExpr::new(
            if_keyword.0,
            condition,
            then_branch,
            elif_else.unwrap_or_default(),
            TokenPos::new(s, e)
        ))))
    }
}

ElifElse: Vec<(Option<Expr>, Expr)> = {
    ElseKeyword <else_expr:CodeBlock> => vec![(None, *else_expr)],
    Elif LParen <condition:Expr> RParen <then_branch:CodeBlock> <next:ElifElse?> => {
        let mut exprs = vec![(Some(*condition), *then_branch)];
        if let Some(rest) = next {
            exprs.extend(rest);
        }
        exprs
    }
}

WhileLoop: Box<Expr> = {
   <s:@L> While LParen <condition:Expr> RParen <body:CodeBlock> <e:@R>=> Box::new(Expr::new(ExprKind::WhileLoop(WhileLoop {
        condition,
        body,
        _type: None,
        token_pos: TokenPos::new(s, e),
    }))),
}

ForExpr: Box<Expr> = {
    <s: @L> For LParen <id:Identifier> In <call:UpperExpressions> RParen <body:UpperExpressions> <e: @R> => {
        if let ExprKind::FunctionCall(ref func_call) = (*call).kind {
            if func_call.funct_name == "range" && func_call.arguments.len() == 2 {
                let mut args = func_call.arguments.clone();
                let start = args.remove(0);
                let end = args.remove(0);
                Box::new(Expr::new(ExprKind::ForExp(ForExpr {
                    variable: id.0,
                    start: Box::new(start),
                    end: Box::new(end),
                    body: body,
                    _type: None,
                    token_pos: TokenPos::new(s, e),
                })))
            } else {
                panic!("For loop must use `range` with exactly two arguments");
            }
        } else {
            panic!("For loop iterable must be a `range` function call");
        }
    }
}

// ===================
// Argumentos de función
// ===================
ArgList: Vec<Box<Expr>> = {
    <first:Expr> <rest:(<Comma> <Expr>)*> => {
        let mut args = vec![first];
        for (_, expr) in rest { args.push(expr); }
        args
    },
    => Vec::new(),
}

Params: Vec<FunctionParams> = {
    LParen <params:IdentifierList> RParen => params,
    LParen RParen => Vec::new(),
}

// ===================
// Tokens y literales
// ===================
Semicolon: (DelimiterToken, TokenPos) = { <s:@L> ";" <e:@R> => (DelimiterToken::Semicolon, TokenPos::new(s, e)) }
RParen: (DelimiterToken, TokenPos) = { <s:@L> ")" <e:@R> => (DelimiterToken::Rparen, TokenPos::new(s, e)) }
LParen: (DelimiterToken, TokenPos) = { <s:@L> "(" <e:@R> => (DelimiterToken::Lparen, TokenPos::new(s, e)) }
RBrace: (DelimiterToken, TokenPos) = { <s:@L> "}" <e:@R> => (DelimiterToken::Rbrace, TokenPos::new(s, e)) }
LBrace: (DelimiterToken, TokenPos) = { <s:@L> "{" <e:@R> => (DelimiterToken::Lbrace, TokenPos::new(s, e)) }
Comma: (DelimiterToken, TokenPos) = { <s:@L> "," <e:@R> => (DelimiterToken::Comma, TokenPos::new(s, e)) }
DoubleDot: (DelimiterToken, TokenPos) = { <s:@L> ":" <e:@R> => (DelimiterToken::Doubledot, TokenPos::new(s, e)) }
DotAccess: (DelimiterToken, TokenPos) = { <s:@L> "." <e:@R> => (DelimiterToken::DotAccess, TokenPos::new(s, e)) }

LogicalAndOp: (BinaryOperatorToken, TokenPos) = { <s:@L> "&" <e:@R> => (BinaryOperatorToken::And, TokenPos::new(s, e)) }
LogicalOrOp: (BinaryOperatorToken, TokenPos) = { <s:@L> "|" <e:@R> => (BinaryOperatorToken::Or, TokenPos::new(s, e)) }

Let: (KeywordToken, TokenPos) = { 
    <s:@L> "let" <e:@R> => (KeywordToken::Let, TokenPos::new(s, e)) 
}
Elif: (KeywordToken, TokenPos) = { 
    <s:@L> "elif" <e:@R> => (KeywordToken::Elif, TokenPos::new(s, e)) 
}
In: (KeywordToken, TokenPos) = { 
    <s:@L> "in" <e:@R> => (KeywordToken::In, TokenPos::new(s, e)) 
}
While: (KeywordToken, TokenPos) = { 
    <s:@L> "while" <e:@R> => (KeywordToken::While, TokenPos::new(s, e)) 
}
For: (KeywordToken, TokenPos) = { 
    <s:@L> "for" <e:@R> => (KeywordToken::For, TokenPos::new(s, e)) 
}
Print: (KeywordToken, TokenPos) = { 
    <s:@L> "print" <e:@R> => (KeywordToken::Print, TokenPos::new(s, e)) 
}
New: (KeywordToken, TokenPos) = { 
    <s:@L> "new" <e:@R> => (KeywordToken::New, TokenPos::new(s, e)) 
}
IfKeyword: (KeywordToken, TokenPos) = { 
    <s:@L> "if" <e:@R> => (KeywordToken::If, TokenPos::new(s, e)) 
}
ElseKeyword: (KeywordToken, TokenPos) = { 
    <s:@L> "else" <e:@R> => (KeywordToken::Else, TokenPos::new(s, e)) 
}



DestructiveAssignOp: (BinaryOperatorToken, TokenPos) = { 
    <s:@L> ":=" <e:@R> => (BinaryOperatorToken::DotEqual, TokenPos::new(s, e)) 
}

Identifier: (String, TokenPos) = {
    <s:@L> <identifier:r"[A-Za-z][A-Za-z_0-9]*"> <e:@R> => (String::from_str(identifier).unwrap(), TokenPos::new(s, e)),
}

NumberLiteral: (f64, TokenPos) = {
    <s:@L> <number:r"[0-9]+(\.[0-9]+)?"> <e:@R> => (f64::from_str(number).unwrap(), TokenPos::new(s, e)),
}

BooleanLiteral: (bool, TokenPos) = {
    <s:@L> "true" <e:@R> => (true, TokenPos::new(s, e)),
    <s:@L> "false" <e:@R> => (false, TokenPos::new(s, e)),
}

StringLiteral: (String, TokenPos) = {
    <s:@L> <string:r#""([^"\\]|\\.)*""#> <e:@R> => (
        String::from_str(&string[1..string.len()-1]).unwrap(),
        TokenPos::new(s, e)
    ),
}

Signature: (String, TokenPos) = {
    <s: @L> <sig: r"[A-Za-z][A-Za-z_0-9]*"> <e: @R> => 
        (sig.to_string(), TokenPos::new(s, e))
};